{"version":3,"sources":["Timer/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","time","step","autostart","onTick","onTimeEnd","onTimeStart","onTimePause","useState","timeState","setTimeState","timerOn","setTimerOn","intervalIdState","setIntervalIdState","divRef","useRef","useEffect","intervalId","setInterval","prevTime","clearInterval","startTimer","current","style","width","className","onClick","ref","App","console","log","timeLeft","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAGO,SAASA,EAAT,GAQH,IAPAC,EAOD,EAPCA,KACAC,EAMD,EANCA,KACAC,EAKD,EALCA,UACAC,EAID,EAJCA,OACAC,EAGD,EAHCA,UACAC,EAED,EAFCA,YACAC,EACD,EADCA,YAEA,EAAkCC,mBAASP,GAA3C,mBAAOQ,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAuB,IAAdL,GAAvC,mBAAOQ,EAAP,KAAgBC,EAAhB,KACA,EAA8CJ,qBAA9C,mBAAOK,EAAP,KAAwBC,EAAxB,KACMC,EAASC,iBAAO,MAqDtB,OA3BAC,qBAAU,WACFN,EAzBW,WACf,IAAMO,EAAaC,aAAY,WAC3BT,GAAa,SAACU,GACV,OAAIA,GAAY,GAAKA,GAAYlB,GAC7BmB,cAAcH,GAEP,GAGJE,EAAWlB,OAEvBA,GAEHY,EAAmBI,GACnBZ,EAAYG,GAYRa,IANJD,cAAcR,GACdN,EAAYE,MASb,CAACE,IAEJM,qBAAU,WAIN,GAHAb,EAAOK,GACPM,EAAOQ,QAAQC,MAAMC,MAArB,UAAiChB,EAAYR,EAAQ,IAArD,KAEkB,IAAdQ,EAKA,OAJAJ,EAAUI,GACVC,EAAaT,QACbW,GAAW,KAIhB,CAACH,IAEJQ,qBAAU,WACFR,IAAcR,IAAoB,IAAZU,GACtBC,GAAW,KAEhB,CAACH,EAAWE,IAGX,gCACI,gCAAMF,EAAN,SACA,wBAAQiB,UAAU,eAAeC,QAAS,kBAAMf,GAAYD,IAA5D,yBACA,qBAAKe,UAAU,YAAYE,IAAKb,OCvD7Bc,MAdf,WACE,OACE,cAAC7B,EAAD,CACEC,KAAM,IACNC,KAAM,IACNC,WAAW,EACXC,OAAQ,SAACH,GAAD,OAAU6B,QAAQC,IAAI,0FAAsB9B,IACpDI,UAAW,kBAAMyB,QAAQC,IAAI,6DAC7BzB,YAAa,SAAC0B,GAAD,OAAcF,QAAQC,IAAI,2FACvCxB,YAAa,SAACyB,GAAD,OAAcF,QAAQC,IAAI,yFCA9BE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.36fb7dfb.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nexport function Timer({\r\n    time,\r\n    step,\r\n    autostart,\r\n    onTick,\r\n    onTimeEnd,\r\n    onTimeStart,\r\n    onTimePause\r\n}) {\r\n    const [timeState, setTimeState] = useState(time);\r\n    const [timerOn, setTimerOn] = useState(autostart === true ? true : false);\r\n    const [intervalIdState, setIntervalIdState] = useState();\r\n    const divRef = useRef(null);\r\n\r\n    const startTimer = () => {\r\n        const intervalId = setInterval(() => {\r\n            setTimeState((prevTime) => {\r\n                if (prevTime <= 0 || prevTime <= step) {\r\n                    clearInterval(intervalId);\r\n    \r\n                    return 0;\r\n                }\r\n    \r\n                return prevTime - step;\r\n            });\r\n        }, step);\r\n\r\n        setIntervalIdState(intervalId);\r\n        onTimeStart(timeState);\r\n\r\n        return intervalId;\r\n    };\r\n\r\n    const stopTimer = () => {\r\n        clearInterval(intervalIdState);\r\n        onTimePause(timeState);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (timerOn) {\r\n            startTimer();\r\n        } else {\r\n            stopTimer();\r\n        }   \r\n    }, [timerOn]);\r\n\r\n    useEffect(() => {\r\n        onTick(timeState);\r\n        divRef.current.style.width = `${(timeState / time) * 100}%`;\r\n\r\n        if (timeState === 0) {\r\n            onTimeEnd(timeState);\r\n            setTimeState(time);\r\n            setTimerOn(false);\r\n\r\n            return;\r\n        }\r\n    }, [timeState]);\r\n\r\n    useEffect(() => {\r\n        if (timeState === time && timerOn === false) {\r\n            setTimerOn(true);\r\n        }\r\n    }, [timeState, timerOn]);\r\n\r\n    return (\r\n        <div>\r\n            <div>{timeState} ms</div>\r\n            <button className=\"button-start\" onClick={() => setTimerOn(!timerOn)}>Start/Pause</button>\r\n            <div className=\"indicator\" ref={divRef}></div>\r\n        </div>\r\n    )\r\n};\r\n","import React from \"react\";\nimport { Timer } from '././Timer/Timer.js';\n\nfunction App() {\n  return (\n    <Timer \n      time={5000}\n      step={500}\n      autostart={true}\n      onTick={(time) => console.log(\"Залишилось часу: \" + time)}\n      onTimeEnd={() => console.log(\"Час вийшов!\")}\n      onTimeStart={(timeLeft) => console.log(\"Таймер запущено!\")}\n      onTimePause={(timeLeft) => console.log(\"Таймер на паузі!\")}\n    />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}